#!/usr/bin/env node

var exec = require("child_process").exec,
    async = require("async"),
    rimraf = require("rimraf"),
    fs = require('fs'),
    JSON5 = require('json5'),
    xtend = require('xtend'),
    requirejs = require('requirejs');

function executeCommand(command){
  return function(callback){
    var childProc = exec(command, {}, callback || function(){});
    childProc.stdout.pipe(process.stdout);
    childProc.stderr.pipe(process.stderr);
  };
}

function extractConfig(path) {
  var file = fs.readFileSync(path).toString();
  var config = file.replace(/require\.config\(([^\)]+)\);/gi, '$1');
  return JSON5.parse(config);
}

function optimize (from) {
  return function (cb) {
    var config = xtend(
      extractConfig('./public/js/require.config.js'), {
        name:    'components/require/require',
        include: [ 'js/' + from ],
        baseUrl: './public',
        out:     './public/js/' + from + '-bundle.js',
        preserveLicenseComments: false
      });
    console.log('optimizing', from);
    requirejs.optimize(config, function (text) {
      console.log(text);
      cb();
    }, function (err) {
      console.log(err);
      process.exit(1);
    });
  };
}


var tasks = [];

if(process.env.NODE_ENV === 'production'){
  console.log('env is production');
  
  tasks = tasks.concat([
    executeCommand('node_modules/.bin/jade-amd --from views/includes --to public/js/templates --jaderuntime jaderuntime'),
    optimize('edit'),
    optimize('index'),
    optimize('list')
  ]);

}

async.series(tasks, function(){
  console.log('finished!');
});
